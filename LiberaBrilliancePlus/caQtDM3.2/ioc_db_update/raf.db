
record(libera, "$(P):$(B):clock_info:decimation:sw") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.decimation.sw")
}

record(libera, "$(P):$(B):clock_info:adc_frequency") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.adc_frequency")
}

record(libera, "$(P):$(B):clock_info:decimation:sa") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.decimation.sa")
}

record(libera, "$(P):$(B):clock_info:decimation:tbt") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.decimation.tbt")
}

record(libera, "$(P):$(B):clock_info:tbt_frequency") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.tbt_frequency")
}

record(libera, "$(P):$(B):clock_info:harmonic_number") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.harmonic_number")
}

record(libera, "$(P):$(B):clock_info:rf_frequency") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.rf_frequency")
}

record(libera, "$(P):$(B):clock_info:decimation:fa") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.decimation.fa")
}

record(libera, "$(P):$(B):maxadc") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conf.second_max")
    field(SCAN, "1 second")
}

record(libera, "$(P):$(B):maxadc_rst") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conf.second_max_reset")
}

record(libera, "$(P):$(B):agc:enabled") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.agc.enabled")
}

record(libera, "$(P):$(B):agc:power_level") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.agc.power_level")
}

record(libera, "$(P):$(B):agc:att") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.att")
}

record(libera, "$(P):$(B):switching:enable") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.switching")
}

record(libera, "$(P):$(B):switching:source") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conf.switching_source")
}

record(libera, "$(P):$(B):switching:delay") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conf.switching_delay")
}

record(libera, "$(P):$(B):dsc:avg_ph_patt") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.averaging_phase_patterns")
}

record(libera, "$(P):$(B):dsc:avg_gain_patt") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.averaging_gain_patterns")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:gain_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.gain")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:gain_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.gain.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:gain_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.gain.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:gain_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.gain.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:gain_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.gain.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:phase_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.phase")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:phase_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.phase.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:phase_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.phase.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:phase_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.phase.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_a:phase_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.phase.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:phase_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.phase")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:phase_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.phase.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:phase_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.phase.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:phase_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.phase.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:phase_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.phase.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:gain_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.gain")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:gain_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.gain.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:gain_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.gain.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:gain_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.gain.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_b:gain_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.gain.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:phase_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.phase")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:phase_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.phase.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:phase_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.phase.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:phase_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.phase.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:phase_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.phase.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:gain_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.gain")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:gain_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.gain.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:gain_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.gain.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:gain_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.gain.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_c:gain_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.gain.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:gain_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.gain")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:gain_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.gain.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:gain_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.gain.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:gain_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.gain.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:gain_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.gain.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:phase_avg") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.phase")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:phase_0") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.phase.pattern_0")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:phase_1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.phase.pattern_1")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:phase_2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.phase.pattern_2")
}

record(libera, "$(P):$(B):dsc:coeff:ch_d:phase_3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.phase.pattern_3")
}

record(libera, "$(P):$(B):dsc:coeff:if_delta") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.if_delta")
}

record(libera, "$(P):$(B):dsc:coeff:adjust") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.coefficients.adjust")
}

record(libera, "$(P):$(B):dsc:coeff:type") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.coefficients.type")
}

record(libera, "$(P):$(B):dsc:coeff:att_dependent") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.coefficients.att_dependent")
}

record(libera, "$(P):$(B):dsc:frequency") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.frequency")
}

record(libera, "$(P):$(B):dsc:tolerance_curr") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.quality.tolerance_curr")
}

record(libera, "$(P):$(B):dsc:tolerance_thr") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.quality.tolerance_thr")
}

record(libera, "$(P):$(B):dsc:qselect") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.quality.selector")
}

record(libera, "$(P):$(B):dsc:maxadc_thr") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.tuning.dsc.threshold.second_max_limit")
}

record(libera, "$(P):$(B):ilk:enabled") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.enabled")
}

record(libera, "$(P):$(B):ilk:gain_dependent:enabled") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.gain_dependent.enabled")
}

record(libera, "$(P):$(B):ilk:gain_dependent:threshold") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.gain_dependent.threshold")
}

record(libera, "$(P):$(B):ilk:gain_dependent:threshold_dB") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.gain_dependent.threshold_dB")
    field(SCAN, "1 second")
}

record(libera, "$(P):$(B):ilk:limits:ovf_mode") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.overflow.mode")
}

record(libera, "$(P):$(B):ilk:limits:ovf_threshold") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.overflow.threshold")
}

record(libera, "$(P):$(B):ilk:limits:ovf_duration") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.overflow.duration")
}

record(libera, "$(P):$(B):ilk:filter:overflow") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.filter.overflow")
}

record(libera, "$(P):$(B):ilk:filter:position") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.filter.position")
}

record(libera, "$(P):$(B):ilk:limits:max_y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.position.max.y")
}

record(libera, "$(P):$(B):ilk:limits:max_x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.position.max.x")
}

record(libera, "$(P):$(B):ilk:limits:min_y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.position.min.y")
}

record(libera, "$(P):$(B):ilk:limits:min_x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.limits.position.min.x")
}

record(libera, "$(P):$(B):ilk:status") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status")
}

record(libera, "$(P):$(B):ilk:status:reset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.reset")
}

record(libera, "$(P):$(B):ilk:status:adc_ovf") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.adc_overflow")
}

record(libera, "$(P):$(B):ilk:status:x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.x")
}

record(libera, "$(P):$(B):ilk:status:attenuator") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.attenuator")
}

record(libera, "$(P):$(B):ilk:status:adc_ovf_filtered") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.adc_overflow_filtered")
}

record(libera, "$(P):$(B):ilk:status:y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).interlock.status.il_status.y")
}

record(libera, "$(P):$(B):pm:limits:ovf_threshold") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.overflow.threshold")
}

record(libera, "$(P):$(B):hp_temp:ts1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.ts1")
}

record(libera, "$(P):$(B):hp_temp:ts2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.ts2")
}

record(libera, "$(P):$(B):hp_temp:ts3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.ts3")
}

record(libera, "$(P):$(B):hp_temp:ts4") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.ts4")
}

record(libera, "$(P):$(B):hp_temp:pt1") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.pt1")
}

record(libera, "$(P):$(B):hp_temp:pt2") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.pt2")
}

record(libera, "$(P):$(B):hp_temp:pt3") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.pt3")
}

record(libera, "$(P):$(B):hp_temp:pt4") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).hp_temp.pt4")
}

record(libera, "$(P):$(B):pm:length") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.length")
}

record(libera, "$(P):$(B):pm:limits:ovf_duration") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.overflow.duration")
}

record(libera, "$(P):$(B):pm:limits:max_x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.position.max.x")
}

record(libera, "$(P):$(B):pm:limits:max_y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.position.max.y")
}

record(libera, "$(P):$(B):pm:limits:min_y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.position.min.y")
}

record(libera, "$(P):$(B):pm:limits:min_x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.limits.position.min.x")
}

record(libera, "$(P):$(B):pm:timestamp") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.timestamp")
}

record(libera, "$(P):$(B):pm:source_select") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.source_select")
}

record(libera, "$(P):$(B):pm:offset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.offset")
}

record(libera, "$(P):$(B):pm:capacity") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.capacity")
}

record(libera, "$(P):$(B):pm:os_time") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.os_time")
}

record(libera, "$(P):$(B):pm:capture") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.capture")
}

record(libera, "$(P):$(B):tbt:sr:tbt_enable") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.mode.sw_enable")
}

record(libera, "$(P):$(B):tbt:sr:fa_enable") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.mode.hw_enable")
}

record(libera, "$(P):$(B):tbt:sr:avg_window") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.averaging_window")
}

record(libera, "$(P):$(B):tbt:sr:avg_stop") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.averaging_stop")
}

record(libera, "$(P):$(B):tbt:sr:start") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.start")
}

record(libera, "$(P):$(B):tbt:sr:window") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.spike_removal.window")
}

record(libera, "$(P):$(B):tbt:data_type") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.data_type")
}

record(libera, "$(P):$(B):tbt:adc_mask") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.adc_mask")
}

record(libera, "$(P):$(B):tbt:phase_offset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.phase_offset")
}

record(libera, "$(P):$(B):info:customer") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.customer")
}

record(libera, "$(P):$(B):info:revision") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.revision")
}

record(libera, "$(P):$(B):info:health_status") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.health_status")
}

record(libera, "$(P):$(B):events:sync:count") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.sync.count")
}

record(libera, "$(P):$(B):events:trigger:count") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.trigger.count")
}

record(libera, "$(P):$(B):events:trigger:timestamp") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.trigger.timestamp")
}

record(libera, "$(P):$(B):events:ilk:timestamp") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.interlock.timestamp")
}

record(libera, "$(P):$(B):events:ilk:count") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.interlock.count")
}

record(libera, "$(P):$(B):events:current_time") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.current_time")
}

record(libera, "$(P):$(B):events:sync:timestamp") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).events.sync.timestamp")
}

record(libera, "$(P):$(B):id") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.id")
}

record(libera, "$(P):$(B):kx") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.Kx")
}

record(libera, "$(P):$(B):ky") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.Ky")
}

record(libera, "$(P):$(B):ks") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.Ks")
}

record(libera, "$(P):$(B):off_x") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.off_x")
}

record(libera, "$(P):$(B):off_y") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.off_y")
}

record(libera, "$(P):$(B):off_s") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.off_s")
}

record(libera, "$(P):$(B):off_q") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signal_processing.position.off_q")
}

record(libera, "$(P):$(B):sync") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).local_timing.synchronize_lmt")
}

record(libera, "$(P):$(B):trig_delay") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).local_timing.trigger_delay")
}

record(libera, "$(P):$(B):sync_st_m") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).local_timing.sync_state_machine")
}

record(libera, "$(P):$(B):sp:adc_thr")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.threshold")
}

record(libera, "$(P):$(B):sp:orientation")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.pickup_pos")
}

record(libera, "$(P):$(B):sp:n_before")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.n_before")
}

record(libera, "$(P):$(B):sp:n_after")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.n_after")
}

record(libera, "$(P):$(B):stat:sa:x_mean")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.mean_x")
}

record(libera, "$(P):$(B):stat:sa:y_mean")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.mean_y")
}

record(libera, "$(P):$(B):stat:sa:x_std")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.std_x")
}

record(libera, "$(P):$(B):stat:sa:y_std")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.std_y")
}

record(libera, "$(P):$(B):stat:sa:step")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.step")
}

record(libera, "$(P):$(B):stat:sa:window")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.sa.window")
}

record(libera, "$(P):$(B):stat:tbt:x_mean")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.mean_x")
}

record(libera, "$(P):$(B):stat:tbt:y_mean")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.mean_y")
}

record(libera, "$(P):$(B):stat:tbt:x_std")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.std_x")
}

record(libera, "$(P):$(B):stat:tbt:y_std")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.std_y")
}

record(libera, "$(P):$(B):stat:tbt:period")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.period")
}

record(libera, "$(P):$(B):stat:tbt:window")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.window")
}

record(libera, "$(P):$(B):stat:tbt:mode")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).statistics.ddc.mode")
}

record(liberaSignal, "$(P):$(B):sp")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.signal")
    field(SCAN, "I/O Intr")
    field(ACQM, "Event")
}

record(liberaSignal, "$(P):$(B):adc") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.adc")
    field(NGRP, 2048)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):ddc_raw") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.ddc_raw")
    field(NGRP, 10000)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):pm:ddc_raw") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.signals.ddc_raw")
    field(NGRP, 10000)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):pm:ddc_synth") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).postmortem.signals.ddc_synthetic")
    field(NGRP, 10000)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):ddc_synth") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.ddc_synthetic")
    field(NGRP, 10000)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}


record(liberaSignal, "$(P):$(B):event") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):fa") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.fa")
    field(NGRP, 1)
}

record(liberaSignal, "$(P):$(B):sa") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.sa")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):tdp_synth") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.tdp_synthetic")
    field(NGRP, 10000)
    field(ACQM, "Event")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):tbt:tbt_window") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).tbt.tbt_window")
    field(NGRP, 2048)
    field(ACQM, "Now")
    field(SCAN, "Passive")
}

record(liberaSignal, "$(P):$(B):sp") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).single_pass.signal")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):dsc:acpc_a")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_0.stream")
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):dsc:acpc_b")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_1.s$
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):dsc:acpc_c")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_2.s$
    field(SCAN, "I/O Intr")
}

record(liberaSignal, "$(P):$(B):dsc:acpc_d")
{
    info(MCII,  "mcii://$(D)/boards.$(MB).conditioning.coefficients.channel_3.s$
    field(SCAN, "I/O Intr")
}

